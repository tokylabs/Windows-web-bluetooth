{"version":3,"sources":["device.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAEF,6CAA+C;AAE/C,qCAAqD;AAErD;;GAEG;AACH,qBAA6B,SAAQ,4BAAe;IA2DhD;;;OAGG;IACH,YAAY,IAA8B;QACtC,KAAK,EAAE,CAAC;QAlDZ;;WAEG;QACa,OAAE,GAAW,IAAI,CAAC;QAElC;;WAEG;QACa,SAAI,GAAW,IAAI,CAAC;QAEpC;;WAEG;QACa,SAAI,GAA8B,IAAI,CAAC;QAEvD;;WAEG;QACa,2BAAsB,GAAY,KAAK,CAAC;QAYxD;;WAEG;QACa,eAAU,GAAc,IAAI,CAAC;QAE7C;;WAEG;QACa,qBAAgB,GAAkB,EAAE,CAAC;QAErD;;WAEG;QACa,kBAAa,GAAkB,EAAE,CAAC;QAS9C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACpD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAExC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YAAC,IAAI,CAAC,IAAI,GAAG,kCAAkC,IAAI,CAAC,EAAE,GAAG,CAAC;QACzE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YAAC,IAAI,CAAC,IAAI,GAAG,IAAI,kCAAyB,CAAC,IAAI,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACI,mBAAmB;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;YACpC,MAAM,CAAC,mDAAmD,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,qBAAqB;QACxB,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;YACpC,MAAM,CAAC,qDAAqD,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACP,CAAC;;AA9FD;;;GAGG;AACW,kCAAkB,GAAW,wBAAwB,CAAC;AAEpE;;;GAGG;AACW,4BAAY,GAAW,uBAAuB,CAAC;AAZjE,0CAiGC","file":"device.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { Bluetooth } from \"./bluetooth\";\nimport { BluetoothRemoteGATTServer } from \"./server\";\n\n/**\n * Bluetooth Device class\n */\nexport class BluetoothDevice extends EventDispatcher {\n\n    /**\n     * Server Disconnected event\n     * @event\n     */\n    public static EVENT_DISCONNECTED: string = \"gattserverdisconnected\";\n\n    /**\n     * Advertisement Received event\n     * @event\n     */\n    public static EVENT_ADVERT: string = \"advertisementreceived\";\n\n    /**\n     * The unique identifier of the device\n     */\n    public readonly id: string = null;\n\n    /**\n     * The name of the device\n     */\n    public readonly name: string = null;\n\n    /**\n     * The gatt server of the device\n     */\n    public readonly gatt: BluetoothRemoteGATTServer = null;\n\n    /**\n     * Whether adverts are being watched (not implemented)\n     */\n    public readonly watchingAdvertisements: boolean = false;\n\n    /**\n     * @hidden\n     */\n    public readonly adData: {\n        rssi?: number;\n        txPower?: null;\n        serviceData?: Map<string, DataView>;\n        manufacturerData?: Map<string, DataView>;\n    };\n\n    /**\n     * @hidden\n     */\n    public readonly _bluetooth: Bluetooth = null;\n\n    /**\n     * @hidden\n     */\n    public readonly _allowedServices: Array<string> = [];\n\n    /**\n     * @hidden\n     */\n    public readonly _serviceUUIDs: Array<string> = [];\n\n    /**\n     * Device constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothDevice>) {\n        super();\n\n        this.id = init.id;\n        this.name = init.name;\n        this.gatt = init.gatt;\n        this.watchAdvertisements = init.watchAdvertisements;\n        this.adData = init.adData;\n\n        this._bluetooth = init._bluetooth;\n        this._allowedServices = init._allowedServices;\n        this._serviceUUIDs = init._serviceUUIDs;\n\n        if (!this.name) this.name = `Unknown or Unsupported Device (${this.id})`;\n        if (!this.gatt) this.gatt = new BluetoothRemoteGATTServer(this);\n    }\n\n    /**\n     * Starts watching adverts from this device (not implemented)\n     */\n    public watchAdvertisements(): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            reject(\"watchAdvertisements error: method not implemented\");\n        });\n    }\n\n    /**\n     * Stops watching adverts from this device (not implemented)\n     */\n    public unwatchAdvertisements() {\n        return new Promise((_resolve, reject) => {\n            reject(\"unwatchAdvertisements error: method not implemented\");\n        });\n    }\n}\n"],"sourceRoot":"../src"}