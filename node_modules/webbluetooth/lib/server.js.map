{"version":3,"sources":["server.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAEF,qCAA2C;AAC3C,uCAAuD;AACvD,uCAA2C;AAC3C,uCAAoC;AAEpC;;GAEG;AACH;IAkBI;;;OAGG;IACH,YAAY,MAAuB;QApBnC;;WAEG;QACa,WAAM,GAAoB,IAAI,CAAC;QAEvC,eAAU,GAAY,KAAK,CAAC;QAQ5B,WAAM,GAAW,IAAI,CAAC;QACtB,aAAQ,GAAsC,IAAI,CAAC;QAOvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;IACjC,CAAC;IAjBD;;OAEG;IACH,IAAW,SAAS;QAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAcD;;;OAGG;IACI,OAAO;QACV,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,MAAM,CAAC,yCAAyC,CAAC,CAAC;YAE7E,iBAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;gBAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,EAAE,GAAG,EAAE;gBACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBACxB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,wBAAe,CAAC,kBAAkB,CAAC,CAAC;gBAC9D,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,wBAAe,CAAC,kBAAkB,CAAC,CAAC;YAC7E,CAAC,EAAE,KAAK,CAAC,EAAE;gBACP,MAAM,CAAC,kBAAkB,KAAK,EAAE,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,UAAU;QACb,iBAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACI,iBAAiB,CAAC,OAAwB;QAC7C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,MAAM,CAAC,+CAA+C,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,MAAM,CAAC,+CAA+C,CAAC,CAAC;YAE7E,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;iBAC/B,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACb,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;oBAAC,MAAM,CAAC,MAAM,CAAC,4CAA4C,CAAC,CAAC;gBACvF,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC;iBACD,KAAK,CAAC,KAAK,CAAC,EAAE;gBACX,MAAM,CAAC,4BAA4B,KAAK,EAAE,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACI,kBAAkB,CAAC,OAAyB;QAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,MAAM,CAAC,gDAAgD,CAAC,CAAC;YAErF;gBACI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;oBAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE5C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;oBAClD,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,wBAAc,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC5D,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;oBAAC,MAAM,CAAC,MAAM,CAAC,6CAA6C,CAAC,CAAC;gBACxF,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE9C,iBAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,EAAE;gBAC3E,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;oBACvC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE;wBACvB,MAAM,EAAE,IAAI,CAAC,MAAM;qBACtB,CAAC,CAAC;oBACH,MAAM,CAAC,IAAI,oCAA0B,CAAC,WAAW,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;gBAEH,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC,EAAE,KAAK,CAAC,EAAE;gBACP,MAAM,CAAC,6BAA6B,KAAK,EAAE,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAlHD,8DAkHC","file":"server.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { BluetoothDevice } from \"./device\";\nimport { BluetoothRemoteGATTService } from \"./service\";\nimport { getServiceUUID } from \"./helpers\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Remote GATT Server class\n */\nexport class BluetoothRemoteGATTServer {\n\n    /**\n     * The device the gatt server is related to\n     */\n    public readonly device: BluetoothDevice = null;\n\n    private _connected: boolean = false;\n    /**\n     * Whether the gatt server is connected\n     */\n    public get connected(): boolean {\n        return this._connected;\n    }\n\n    private handle: string = null;\n    private services: Array<BluetoothRemoteGATTService> = null;\n\n    /**\n     * Server constructor\n     * @param device Device the gatt server relates to\n     */\n    constructor(device: BluetoothDevice) {\n        this.device = device;\n        this.handle = this.device.id;\n    }\n\n    /**\n     * Connect the gatt server\n     * @returns Promise containing the gatt server\n     */\n    public connect(): Promise<BluetoothRemoteGATTServer> {\n        return new Promise((resolve, reject) => {\n            if (this.connected) return reject(\"connect error: device already connected\");\n\n            adapter.connect(this.handle, () => {\n                this._connected = true;\n                resolve(this);\n            }, () => {\n                this.services = null;\n                this._connected = false;\n                this.device.dispatchEvent(BluetoothDevice.EVENT_DISCONNECTED);\n                this.device._bluetooth.dispatchEvent(BluetoothDevice.EVENT_DISCONNECTED);\n            }, error => {\n                reject(`connect Error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Disconnect the gatt server\n     */\n    public disconnect() {\n        adapter.disconnect(this.handle);\n        this._connected = false;\n    }\n\n    /**\n     * Gets a single primary service contained in the gatt server\n     * @param service service UUID\n     * @returns Promise containing the service\n     */\n    public getPrimaryService(service: string | number): Promise<BluetoothRemoteGATTService> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(\"getPrimaryService error: device not connected\");\n            if (!service) return reject(\"getPrimaryService error: no service specified\");\n\n            this.getPrimaryServices(service)\n            .then(services => {\n                if (services.length !== 1) return reject(\"getPrimaryService error: service not found\");\n                resolve(services[0]);\n            })\n            .catch(error => {\n                reject(`getPrimaryService error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of primary services contained in the gatt server\n     * @param service service UUID\n     * @returns Promise containing an array of services\n     */\n    public getPrimaryServices(service?: string | number): Promise<Array<BluetoothRemoteGATTService>> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(\"getPrimaryServices error: device not connected\");\n\n            function complete() {\n                if (!service) return resolve(this.services);\n\n                const filtered = this.services.filter(serviceObject => {\n                    return (serviceObject.uuid === getServiceUUID(service));\n                });\n\n                if (filtered.length !== 1) return reject(\"getPrimaryServices error: service not found\");\n                resolve(filtered);\n            }\n\n            if (this.services) return complete.call(this);\n\n            adapter.discoverServices(this.handle, this.device._allowedServices, services => {\n                this.services = services.map(serviceInfo => {\n                    Object.assign(serviceInfo, {\n                        device: this.device\n                    });\n                    return new BluetoothRemoteGATTService(serviceInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getPrimaryServices error: ${error}`);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../src"}