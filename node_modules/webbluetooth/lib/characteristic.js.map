{"version":3,"sources":["characteristic.ts"],"names":[],"mappings":"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","file":"characteristic.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { BluetoothRemoteGATTService } from \"./service\";\nimport { BluetoothRemoteGATTDescriptor } from \"./descriptor\";\nimport { getDescriptorUUID } from \"./helpers\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Characteristic Properties interface\n */\nexport interface BluetoothCharacteristicProperties {\n    /**\n     * Broadcast property\n     */\n    broadcast: boolean;\n    /**\n     * Read property\n     */\n    read: boolean;\n    /**\n     * Write without response property\n     */\n    writeWithoutResponse: boolean;\n    /**\n     * Write property\n     */\n    write: boolean;\n    /**\n     * Notify property\n     */\n    notify: boolean;\n    /**\n     * Indicate property\n     */\n    indicate: boolean;\n    /**\n     * Authenticated signed writes property\n     */\n    authenticatedSignedWrites: boolean;\n    /**\n     * Reliable write property\n     */\n    reliableWrite: boolean;\n    /**\n     * Writable auxiliaries property\n     */\n    writableAuxiliaries: boolean;\n}\n\n/**\n * Bluetooth Remote GATT Characteristic class\n */\nexport class BluetoothRemoteGATTCharacteristic extends EventDispatcher {\n\n    /**\n     * Characteristic Value Changed event\n     * @event\n     */\n    public static EVENT_CHANGED: string = \"characteristicvaluechanged\";\n\n    /**\n     * The service the characteristic is related to\n     */\n    public readonly service: BluetoothRemoteGATTService = null;\n\n    /**\n     * The unique identifier of the characteristic\n     */\n    public readonly uuid = null;\n\n    /**\n     * The properties of the characteristic\n     */\n    public readonly properties: BluetoothCharacteristicProperties;\n\n    private _value: DataView = null;\n    /**\n     * The value of the characteristic\n     */\n    public get value(): DataView {\n        return this._value;\n    }\n\n    private handle: string = null;\n    private descriptors: Array<BluetoothRemoteGATTDescriptor> = null;\n\n    /**\n     * Characteristic constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothRemoteGATTCharacteristic>) {\n        super();\n\n        this.service = init.service;\n        this.uuid = init.uuid;\n        this.properties = init.properties;\n        this._value = init.value;\n\n        this.handle = this.uuid;\n    }\n\n    private setValue(value?: DataView, emit?: boolean) {\n        this._value = value;\n        if (emit) {\n            this.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n            this.service.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n            this.service.device.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n            this.service.device._bluetooth.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n        }\n    }\n\n    /**\n     * Gets a single characteristic descriptor\n     * @param descriptor descriptor UUID\n     * @returns Promise containing the descriptor\n     */\n    public getDescriptor(descriptor: string | number): Promise<BluetoothRemoteGATTDescriptor> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"getDescriptor error: device not connected\");\n            if (!descriptor) return reject(\"getDescriptor error: no descriptor specified\");\n\n            this.getDescriptors(descriptor)\n            .then(descriptors => {\n                if (descriptors.length !== 1) return reject(\"getDescriptor error: descriptor not found\");\n                resolve(descriptors[0]);\n            })\n            .catch(error =>  {\n                reject(`getDescriptor error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of the characteristic's descriptors\n     * @param descriptor descriptor UUID\n     * @returns Promise containing an array of descriptors\n     */\n    public getDescriptors(descriptor?: string | number): Promise<Array<BluetoothRemoteGATTDescriptor>> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"getDescriptors error: device not connected\");\n\n            function complete() {\n                if (!descriptor) return resolve(this.descriptors);\n\n                const filtered = this.descriptors.filter(descriptorObject => {\n                    return (descriptorObject.uuid === getDescriptorUUID(descriptor));\n                });\n\n                if (filtered.length !== 1) return reject(\"getDescriptors error: descriptor not found\");\n                resolve(filtered);\n            }\n\n            if (this.descriptors) return complete.call(this);\n\n            adapter.discoverDescriptors(this.handle, [], descriptors => {\n                this.descriptors = descriptors.map(descriptorInfo => {\n                    Object.assign(descriptorInfo, {\n                        characteristic: this\n                    });\n                    return new BluetoothRemoteGATTDescriptor(descriptorInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getDescriptors error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets the value of the characteristic\n     * @returns Promise containing the value\n     */\n    public readValue(): Promise<DataView> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"readValue error: device not connected\");\n\n            adapter.readCharacteristic(this.handle, dataView => {\n                this.setValue(dataView, true);\n                resolve(dataView);\n            }, error => {\n                reject(`readValue error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Updates the value of the characteristic\n     * @param value The value to write\n     */\n    public writeValue(value: ArrayBuffer | ArrayBufferView): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"writeValue error: device not connected\");\n\n            function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n                return (source as ArrayBufferView).buffer !== undefined;\n            }\n\n            const arrayBuffer = isView(value) ? value.buffer : value;\n            const dataView = new DataView(arrayBuffer);\n\n            adapter.writeCharacteristic(this.handle, dataView, () => {\n                this.setValue (dataView);\n                resolve();\n            }, error => {\n                reject(`writeValue error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Start notifications of changes for the characteristic\n     * @returns Promise containing the characteristic\n     */\n    public startNotifications(): Promise<BluetoothRemoteGATTCharacteristic> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"startNotifications error: device not connected\");\n\n            adapter.enableNotify(this.handle, dataView => {\n                this.setValue(dataView, true);\n            }, () => {\n                resolve(this);\n            }, error => {\n                reject(`startNotifications error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Stop notifications of changes for the characteristic\n     * @returns Promise containing the characteristic\n     */\n    public stopNotifications(): Promise<BluetoothRemoteGATTCharacteristic> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"stopNotifications error: device not connected\");\n\n            adapter.disableNotify(this.handle, () => {\n                resolve(this);\n            }, error => {\n                reject(`stopNotifications error: ${error}`);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../src"}