{"version":3,"sources":["descriptor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBE;;AAGF,uCAAoC;AAEpC;;GAEG;AACH;IAsBI;;;OAGG;IACH,YAAY,IAA4C;QAxBxD;;WAEG;QACa,mBAAc,GAAsC,IAAI,CAAC;QAEzE;;WAEG;QACa,SAAI,GAAW,IAAI,CAAC;QAE5B,WAAM,GAAa,IAAI,CAAC;QAQxB,WAAM,GAAW,IAAI,CAAC;QAO1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;IAC7D,CAAC;IAnBD;;OAEG;IACH,IAAW,KAAK;QACZ,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAgBD;;;OAGG;IACI,SAAS;QACZ,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,MAAM,CAAC,uCAAuC,CAAC,CAAC;YAE/G,iBAAO,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;gBAC3C,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;gBACvB,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,EAAE,KAAK,CAAC,EAAE;gBACP,MAAM,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,KAAoC;QAClD,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,MAAM,CAAC,wCAAwC,CAAC,CAAC;YAEhH,gBAAgB,MAAqC;gBACjD,MAAM,CAAE,MAA0B,CAAC,MAAM,KAAK,SAAS,CAAC;YAC5D,CAAC;YAED,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;YACzD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC;YAE3C,iBAAO,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE;gBAChD,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;gBACvB,OAAO,EAAE,CAAC;YACd,CAAC,EAAE,KAAK,CAAC,EAAE;gBACP,MAAM,CAAC,qBAAqB,KAAK,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA1ED,sEA0EC","file":"descriptor.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { BluetoothRemoteGATTCharacteristic } from \"./characteristic\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Remote GATT Descriptor class\n */\nexport class BluetoothRemoteGATTDescriptor {\n\n    /**\n     * The characteristic the descriptor is related to\n     */\n    public readonly characteristic: BluetoothRemoteGATTCharacteristic = null;\n\n    /**\n     * The unique identifier of the descriptor\n     */\n    public readonly uuid: string = null;\n\n    private _value: DataView = null;\n    /**\n     * The value of the descriptor\n     */\n    public get value(): DataView {\n        return this._value;\n    }\n\n    private handle: string = null;\n\n    /**\n     * Descriptor constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothRemoteGATTDescriptor>) {\n        this.characteristic = init.characteristic;\n        this.uuid = init.uuid;\n        this._value = init.value;\n\n        this.handle = `${this.characteristic.uuid}-${this.uuid}`;\n    }\n\n    /**\n     * Gets the value of the descriptor\n     * @returns Promise containing the value\n     */\n    public readValue(): Promise<DataView> {\n        return new Promise((resolve, reject) =>  {\n            if (!this.characteristic.service.device.gatt.connected) return reject(\"readValue error: device not connected\");\n\n            adapter.readDescriptor(this.handle, dataView => {\n                this._value = dataView;\n                resolve(dataView);\n            }, error => {\n                reject(`readValue error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Updates the value of the descriptor\n     * @param value The value to write\n     */\n    public writeValue(value: ArrayBuffer | ArrayBufferView): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.characteristic.service.device.gatt.connected) return reject(\"writeValue error: device not connected\");\n\n            function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n                return (source as ArrayBufferView).buffer !== undefined;\n            }\n\n            const arrayBuffer = isView(value) ? value.buffer : value;\n            const dataView = new DataView(arrayBuffer);\n\n            adapter.writeDescriptor(this.handle, dataView, () => {\n                this._value = dataView;\n                resolve();\n            }, error => {\n                reject(`writeValue error: ${error}`);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../src"}