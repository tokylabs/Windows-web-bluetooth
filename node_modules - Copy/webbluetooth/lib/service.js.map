{"version":3,"sources":["service.ts"],"names":[],"mappings":"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","file":"service.js","sourcesContent":["/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { BluetoothDevice } from \"./device\";\nimport { BluetoothRemoteGATTCharacteristic } from \"./characteristic\";\nimport { getCharacteristicUUID, getServiceUUID } from \"./helpers\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Remote GATT Service class\n */\nexport class BluetoothRemoteGATTService extends EventDispatcher {\n\n    /**\n     * Service Added event\n     * @event\n     */\n    public static EVENT_ADDED: string = \"serviceadded\";\n\n    /**\n     * Service Changed event\n     * @event\n     */\n    public static EVENT_CHANGED: string = \"servicechanged\";\n\n    /**\n     * Service Removed event\n     * @event\n     */\n    public static EVENT_REMOVED: string = \"serviceremoved\";\n\n    /**\n     * The device the service is related to\n     */\n    public readonly device: BluetoothDevice = null;\n\n    /**\n     * The unique identifier of the service\n     */\n    public readonly uuid: string = null;\n\n    /**\n     * Whether the service is a primary one\n     */\n    public readonly isPrimary: boolean = false;\n\n    private handle: string = null;\n    private services: Array<BluetoothRemoteGATTService> = null;\n    private characteristics: Array<BluetoothRemoteGATTCharacteristic> = null;\n\n    /**\n     * Service constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothRemoteGATTService>) {\n        super();\n\n        this.device = init.device;\n        this.uuid = init.uuid;\n        this.isPrimary = init.isPrimary;\n\n        this.handle = this.uuid;\n\n        this.dispatchEvent(BluetoothRemoteGATTService.EVENT_ADDED);\n        this.device.dispatchEvent(BluetoothRemoteGATTService.EVENT_ADDED);\n        this.device._bluetooth.dispatchEvent(BluetoothRemoteGATTService.EVENT_ADDED);\n    }\n\n    /**\n     * Gets a single characteristic contained in the service\n     * @param characteristic characteristic UUID\n     * @returns Promise containing the characteristic\n     */\n    public getCharacteristic(characteristic: string | number): Promise<BluetoothRemoteGATTCharacteristic> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getCharacteristic error: device not connected\");\n            if (!characteristic) return reject(\"getCharacteristic error: no characteristic specified\");\n\n            this.getCharacteristics(characteristic)\n            .then(characteristics => {\n                if (characteristics.length !== 1) return reject(\"getCharacteristic error: characteristic not found\");\n                resolve(characteristics[0]);\n            })\n            .catch(error => {\n                reject(`getCharacteristic error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of characteristics contained in the service\n     * @param characteristic characteristic UUID\n     * @returns Promise containing an array of characteristics\n     */\n    public getCharacteristics(characteristic?: string | number): Promise<Array<BluetoothRemoteGATTCharacteristic>> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getCharacteristics error: device not connected\");\n\n            function complete() {\n                if (!characteristic) return resolve(this.characteristics);\n\n                const filtered = this.characteristics.filter(characteristicObject => {\n                    return (characteristicObject.uuid === getCharacteristicUUID(characteristic));\n                });\n\n                if (filtered.length !== 1) return reject(\"getCharacteristics error: characteristic not found\");\n                resolve(filtered);\n            }\n\n            if (this.characteristics) return complete.call(this);\n\n            adapter.discoverCharacteristics(this.handle, [], characteristics => {\n                this.characteristics = characteristics.map(characteristicInfo => {\n                    Object.assign(characteristicInfo, {\n                        service: this\n                    });\n                    return new BluetoothRemoteGATTCharacteristic(characteristicInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getCharacteristics error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a single service included in the service\n     * @param service service UUID\n     * @returns Promise containing the service\n     */\n    public getIncludedService(service: string | number): Promise<BluetoothRemoteGATTService> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getIncludedService error: device not connected\");\n            if (!service) return reject(\"getIncludedService error: no service specified\");\n\n            this.getIncludedServices(service)\n            .then(services => {\n                if (services.length !== 1) return reject(\"getIncludedService error: service not found\");\n                resolve(services[0]);\n            })\n            .catch(error => {\n                reject(`getIncludedService error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of services included in the service\n     * @param service service UUID\n     * @returns Promise containing an array of services\n     */\n    public getIncludedServices(service?: string | number): Promise<Array<BluetoothRemoteGATTService>> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getIncludedServices error: device not connected\");\n\n            function complete() {\n                if (!service) return resolve(this.services);\n\n                const filtered = this.services.filter(serviceObject => {\n                    return (serviceObject.uuid === getServiceUUID(service));\n                });\n\n                if (filtered.length !== 1) return reject(\"getIncludedServices error: service not found\");\n                resolve(filtered);\n            }\n\n            if (this.services) return complete.call(this);\n\n            adapter.discoverIncludedServices(this.handle, this.device._allowedServices, services => {\n                this.services = services.map(serviceInfo => {\n                    Object.assign(serviceInfo, {\n                        device: this.device\n                    });\n                    return new BluetoothRemoteGATTService(serviceInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getIncludedServices error: ${error}`);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../src"}